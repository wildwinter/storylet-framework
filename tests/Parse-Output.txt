"true and 1"
And
  Boolean(true)
  Number(1)

Boolean: true
Number: 1
Evaluated: true and 1 = true

"0 && false"
And
  Number(0)
  Boolean(false)

Number: 0
Boolean: false
Evaluated: 0 and false = false

"1|| 2"
Or
  Number(1)
  Number(2)

Number: 1
Number: 2
Evaluated: 1 or 2 = true

" 1 or 0"
Or
  Number(1)
  Number(0)

Number: 1
Number: 0
Evaluated: 1 or 0 = true

"0 or true"
Or
  Number(0)
  Boolean(true)

Number: 0
Boolean: true
Evaluated: 0 or true = true

"function()"
FunctionCall(function)

Function 'function' not found in context.

"1>1"
GreaterThan
  Number(1)
  Number(1)

Number: 1
Number: 1
Evaluated: 1 > 1 = false

"1!=1"
NotEquals
  Number(1)
  Number(1)

Number: 1
Number: 1
Evaluated: 1 != 1 = false

"0!=1"
NotEquals
  Number(0)
  Number(1)

Number: 0
Number: 1
Evaluated: 0 != 1 = true

"0<1"
LessThan
  Number(0)
  Number(1)

Number: 0
Number: 1
Evaluated: 0 < 1 = true

"not true"
Not
  Boolean(true)

Boolean: true
Evaluated: not true = false

"1==1 and 1>0"
And
  Equals
    Number(1)
    Number(1)
  GreaterThan
    Number(1)
    Number(0)

Number: 1
Number: 1
Evaluated: 1 == 1 = true
Number: 1
Number: 0
Evaluated: 1 > 0 = true
Evaluated: true and true = true

"(2 or 1) and (end_func()==17) or 17=="17""
Or
  And
    Or
      Number(2)
      Number(1)
    Equals
      FunctionCall(end_func)
      Number(17)
  Equals
    Number(17)
    String('17')

Number: 2
Number: 1
Evaluated: 2 or 1 = true
Called function: end_func() = true
Number: 17
Evaluated: true == 17 = true
Evaluated: true and true = true
Number: 17
String: '17'
Evaluated: 17 == '17' = true
Evaluated: true or true = true

"(2 or 1) and (end_func()==17) or 17=="17a""
Or
  And
    Or
      Number(2)
      Number(1)
    Equals
      FunctionCall(end_func)
      Number(17)
  Equals
    Number(17)
    String('17a')

Type mismatch: Expecting number but got '17a'

"!true"
Not
  Boolean(true)

Boolean: true
Evaluated: not true = false

"fab00"
Variable(fab00)

Variable 'fab00' not found in context.

"(buck"
Expected ')' but expression ended.

"*www"
Unexpected token: *

"Weeble*2"
Multiply
  Variable(Weeble)
  Number(2)

Variable 'Weeble' not found in context.

"not C"
Not
  Variable(C)

Fetching variable: C -> 15
Evaluated: not 15 = false

"not D"
Not
  Variable(D)

Fetching variable: D -> false
Evaluated: not false = true

"E"
Variable(E)

Variable 'E' not found in context.

"101=101.1"
Equals
  Number(101)
  Number(101.1)

Number: 101
Number: 101.1
Evaluated: 101 == 101.1 = false

"101==101.0"
Equals
  Number(101)
  Number(101)

Number: 101
Number: 101
Evaluated: 101 == 101 = true

"!10!=9"
NotEquals
  Not
    Number(10)
  Number(9)

Number: 10
Evaluated: not 10 = false
Number: 9
Evaluated: false != 9 = true

"!(10!=9)"
Not
  NotEquals
    Number(10)
    Number(9)

Number: 10
Number: 9
Evaluated: 10 != 9 = true
Evaluated: not true = false

"get_name()=="fred""
Equals
  FunctionCall(get_name)
  String('fred')

Called function: get_name() = 'fred'
String: 'fred'
Evaluated: 'fred' == 'fred' = true

"get_name("jim")"
FunctionCall(get_name)
  String('jim')

Function 'get_name' does not support the provided arguments ('jim').

"whisky("test",7)=="7whisky_test""
Equals
  FunctionCall(whisky)
    String('test')
    Number(7)
  String('7whisky_test')

String: 'test'
Number: 7
Called function: whisky('test', 7) = '7whisky_test'
String: '7whisky_test'
Evaluated: '7whisky_test' == '7whisky_test' = true

"whisky("test",7)=='7whisky_test'"
Equals
  FunctionCall(whisky)
    String('test')
    Number(7)
  String('7whisky_test')

String: 'test'
Number: 7
Called function: whisky('test', 7) = '7whisky_test'
String: '7whisky_test'
Evaluated: '7whisky_test' == '7whisky_test' = true

""try a string with spaces""
String('try a string with spaces')

String: 'try a string with spaces'

"funable("boo")"
FunctionCall(funable)
  String('boo')

Function 'funable' not found in context.

"("testing" && ("nesting" or "bucket"))"
And
  String('testing')
  Or
    String('nesting')
    String('bucket')

String: 'testing'
String: 'nesting'
String: 'bucket'
Evaluated: 'nesting' or 'bucket' = false
Evaluated: 'testing' and false = false

"(True && (False or True))"
And
  Boolean(true)
  Or
    Boolean(false)
    Boolean(true)

Boolean: true
Boolean: false
Boolean: true
Evaluated: false or true = true
Evaluated: true and true = true

"-1"
Negative
  Number(1)

Number: 1
Evaluated: - 1 = -1

"-1.0"
Negative
  Number(1)

Number: 1
Evaluated: - 1 = -1

"5-1"
Minus
  Number(5)
  Number(1)

Number: 5
Number: 1
Evaluated: 5 - 1 = 4

"5 + 3 * 2"
Plus
  Number(5)
  Multiply
    Number(3)
    Number(2)

Number: 5
Number: 3
Number: 2
Evaluated: 3 * 2 = 6
Evaluated: 5 + 6 = 11

"10 / 2 + 3"
Plus
  Divide
    Number(10)
    Number(2)
  Number(3)

Number: 10
Number: 2
Evaluated: 10 / 2 = 5
Number: 3
Evaluated: 5 + 3 = 8

""hello" + "world""
Plus
  String('hello')
  String('world')

Type mismatch: Expecting number but got 'hello'

"3 > 2 + 1"
GreaterThan
  Number(3)
  Plus
    Number(2)
    Number(1)

Number: 3
Number: 2
Number: 1
Evaluated: 2 + 1 = 3
Evaluated: 3 > 3 = false

"5 / 0"
Divide
  Number(5)
  Number(0)

Division by zero.

"-True"
Negative
  Boolean(true)

Boolean: true
Evaluated: - true = -1

"!5"
Not
  Number(5)

Number: 5
Evaluated: not 5 = false

"(6 + 2) * 5"
Multiply
  Plus
    Number(6)
    Number(2)
  Number(5)

Number: 6
Number: 2
Evaluated: 6 + 2 = 8
Number: 5
Evaluated: 8 * 5 = 40

"6 / 4 * 3 >= 7 * 2"
GreaterThanEquals
  Multiply
    Divide
      Number(6)
      Number(4)
    Number(3)
  Multiply
    Number(7)
    Number(2)

Number: 6
Number: 4
Evaluated: 6 / 4 = 1.5
Number: 3
Evaluated: 1.5 * 3 = 4.5
Number: 7
Number: 2
Evaluated: 7 * 2 = 14
Evaluated: 4.5 >= 14 = false

"6 / 4 * (3 >= 7) * 2"
Multiply
  Multiply
    Divide
      Number(6)
      Number(4)
    GreaterThanEquals
      Number(3)
      Number(7)
  Number(2)

Number: 6
Number: 4
Evaluated: 6 / 4 = 1.5
Number: 3
Number: 7
Evaluated: 3 >= 7 = false
Evaluated: 1.5 * false = 0
Number: 2
Evaluated: 0 * 2 = 0

"6 / (4 * (3 >= 7)) * 2"
Multiply
  Divide
    Number(6)
    Multiply
      Number(4)
      GreaterThanEquals
        Number(3)
        Number(7)
  Number(2)

Division by zero.

"6 / (4 * 3 >= 7) * 2"
Multiply
  Divide
    Number(6)
    GreaterThanEquals
      Multiply
        Number(4)
        Number(3)
      Number(7)
  Number(2)

Number: 6
Number: 4
Number: 3
Evaluated: 4 * 3 = 12
Number: 7
Evaluated: 12 >= 7 = true
Evaluated: 6 / true = 6
Number: 2
Evaluated: 6 * 2 = 12
